#include <iostream>
#include "json.h"
#include "HttpSession.hpp"
#include "CountEvent.hpp"
#include <fstream>
#include <ctime>
#include <string>
int comparison(std::vector<int> _eventId, int eventId){
            int condition;
            // std::cout << "condition = " << condition << std::endl;
            if (!_eventId.size()==0){
                for(size_t i = 0; i<_eventId.size(); i++){
                    std::cout << "_time[i] = " << _eventId[i]<<std::endl; 
                    std::cout << "event[time] = " << eventId <<std::endl; 
                    if (_eventId[i] == eventId){
                        std::cout << "Anh da duoc tai tu truoc roi" << std::endl;
                        condition = 1; 
                        // std::cout << "condition1 = " << condition << std::endl;
                        i = _eventId.size() + 100;
                    }
                    else{
                        // std::cout << "--------hello-------" << std::endl;
                        condition = 2;
                    }
                }
            }
            else{
                // std::cout << "--------hello1111-------" << std::endl;
                condition = 2;
            }
    return condition;
}
int main(int argc, char const *argv[]) {
    std::string ipCam = "10.2.64.162";
    std::string type = ;
    std::string urlJson = "http://" + ipCam + ":4003/event/personcount?count=20";
    std::string urlFrame = "http://"+ ipCam + ":4003/event/frame/personcount/";
    HttpSession* jsonSession = new HttpSession();
    std::fstream myfile;
    time_t now = time(0);
    tm *ltm = localtime(&now);
    char timer[70];
    sprintf(timer, "%02d:%02d:%02d:%02d:%02d:%02d", ltm->tm_mday,ltm->tm_mon + 1,ltm->tm_year + 1900 ,ltm->tm_hour, ltm->tm_min, ltm->tm_sec);
    std::string Time= std::string(timer);
    // std::string day = std::to_string(ltm->tm_mday) + "-" + std::to_string(ltm->tm_mon);
    std::string path = "../Json_Event/1.txt";
    jsonSession->setUrl(urlJson);
    jsonSession->addHeader("Content-Type: application/json");
    jsonSession->start();

    try {
        std::string message((const char *)jsonSession->getData(), jsonSession->getSize());
        auto j = json::parse(message);
        myfile.open(path, std::ios::out | std::ios::app);
        if (myfile.is_open()){
        myfile << Time;
        myfile << "\n";    
        myfile << message;
        myfile << "\n"; 
        }
        myfile.close();
        std::vector<std::string> _eventId_string;
        std::vector<int> _eventId;
        std::ifstream file1;
        std::string line;
        file1.open("output.txt", std::ios::in);
        if(file1.is_open()){
            
            while (getline(file1,line)){
                std::cout << "line = " << line << std::endl;
                _eventId_string.push_back(line); 
            }
        }
        file1.close();
        if (_eventId_string.size()==0){
            std::string line = "1";
            _eventId_string.push_back(line);
        }
        for (int i=0; i < _eventId_string.size(); i++){
            int num = atoi(_eventId_string.at(i).c_str());
            _eventId.push_back(num);
        }
        std::cout << "size_eventId_string = " << _eventId_string.size()<< std::endl;
        std::cout << "size_eventId = " << _eventId.size()<< std::endl;
        for (auto event : j) {
            int monitorId = event["monitor_id"];
            auto jlocations = event["locations"];
            std::vector<cv::Rect> boxes;
            for (auto jlocation : jlocations) {
                cv::Rect box(jlocation[0], jlocation[1], jlocation[2], jlocation[3]);
                boxes.push_back(box);
            }

            // auto jdistances = event["distancing"];
            // std::vector<std::vector<float>> distances;
            // for(auto jdistance : jdistances) {
            //     std::vector<float> distance;
            //     for (auto id : jdistance) {
            //         distance.push_back(id);
            //     }
            //     distances.push_back(distance);
            // }
            int frame = event["frame"];
            int eventId = event["eventId"];
            std::string time = event["time"];
            // // ------------------------------------------
            //   int condition;
            // // std::cout << "condition = " << condition << std::endl;
            // if (!_time.size()==0){
            //     for(size_t i = 0; i<_time.size(); i++){
            //         std::cout << "_time[i] = " << _time[i]<<std::endl; 
            //         std::cout << "event[time] = " << time <<std::endl; 
            //         if (_time[i] == time){
            //             std::cout << "Anh da duoc tai tu truoc roi" << std::endl;
            //             condition = 1; 
            //             // std::cout << "condition1 = " << condition << std::endl;
            //             i = _time.size() + 100;
            //         }
            //         else{
            //             // std::cout << "--------hello-------" << std::endl;
            //             condition = 2;
            //         }
            //     }
            // }
            // else{
            //     // std::cout << "--------hello1111-------" << std::endl;
            //     condition = 2;
            // }
            // //-------------------------------------------------------
            int condition = comparison(_eventId, eventId);
            // time.replace(time.find(" "), 1, "_");
            // int condition;
            std::cout << "condition = " << condition << std::endl;
            if (condition == 2){
                std::cout << "--------CountEvent-------" << std::endl;
                CountEvent* newEvent = new CountEvent(monitorId, boxes, time, frame);
                std::string currentFrameUrl = urlFrame +  std::to_string(frame);
                HttpSession* imageSession = new HttpSession();
                imageSession->addHeader("Content-Type: image/jpeg");
                imageSession->setUrl(currentFrameUrl);
                imageSession->start();
                try {
                    std::string dataImage((const char *)imageSession->getData(), imageSession->getSize());
                    std::vector<uchar> uImage(dataImage.begin(), dataImage.end());
                    cv::Mat image = cv::imdecode(uImage, cv::IMREAD_COLOR);
                    newEvent->update(image);
                }
                catch(const std::exception& e){
                    std::cerr << e.what() << '\n';
                }
                delete imageSession;
            }
    
        }
        std::ofstream file;
        file.open("output.txt");
            for (auto time : j){
                int eventIds = time["eventId"];
                // std::string times = time["time"];
                if(file.is_open()){
                    file << eventIds << std::endl;
                    std::cout << "tim = " << eventIds << std::endl;
                }   
            }
        file.close(); 

    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
    }

    std::cout << "Process Events Successfull" << std::endl;
    delete jsonSession;
    return 0;
}

