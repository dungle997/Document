{"ast":null,"code":"var _jsxFileName = \"/home/dung/AI_CAM/source_git/cmake_system_service_1/Web/ReactJS/4.Hooks/30.useState/tiktok/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // ===========================// - Set state với callback? ========================\n// function App() {\n//   const [counter, setCounter] = useState(1)\n//   const handleIncrease = () => {\n//     // ra cùng result do counter vẫn là 1 giá trị\n//     // setCounter(counter + 1)\n//     // setCounter(counter + 1)\n//     // setCounter(counter + 1)\n//     // ra két quả khác nhau\n//     setCounter(prev => prev + 1)\n//     setCounter(prev => prev + 1)\n//     // Lúc đầu thì counter  = 1. \n//     // Nếu truyền cho setCounter một callback với 1 đối số thì đối số đó sẽ là giá trị của counter trong lần đầu lúc đó counter = 1. \n//     // Khi sử dụng nhiều hàm setCounter cùng một lúc thì nó sẽ nhận giá trị đối số trước đó của hàm setCounter làm giá trị cho tham số của hàm setCounter\n//     // -------------------------\n//     // useState(initial state)\n//     // initial state nhận bất kì giá trị hợp lệ nào trong JS\n//     // Lưu ý trường hợp truyền hàm vào thì nó sẽ nhận cái giá trị mà hàm đó trả về làm initState\n//   }\n//   console.log(\"code \")\n//   return (\n//     <div className=\"App\" style = {{padding: '20px'}}>\n//         <h1>{counter}</h1>\n//         <button onClick = {handleIncrease}>Increase</button>\n//     </div>\n//   )\n// }\n// =====================================   - Initial state với callback? ==================\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst orders = [100, 200, 300];\n\nfunction App() {\n  _s();\n\n  const total = orders.reduce((total, cur) => total + cur);\n  console.log(total);\n  const [counter, setCounter] = useState(total);\n\n  const handleIncrease = () => {\n    setCounter(prev => prev + 1); // console.log(\"counter \",counter)\n    // -------------------------\n    // useState(initial state)\n    // initial state nhận bất kì giá trị hợp lệ nào trong JS\n    // Lưu ý trường hợp truyền hàm vào thì nó sẽ nhận cái giá trị mà hàm đó trả về làm initState\n    // Mỗi lần click vào button thì lại render lại App component\n  };\n\n  console.log(\"code \");\n  console.log(\"counter \", counter); // ra khỏi hàm handleIncrease thì sẽ cho giá trị setCounter = counter\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleIncrease,\n      children: \"Increase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bRfOHWDT0lB14u8paMcIVcY3ADk=\");\n\n_c = App;\nexport default App; // ### Lưu ý\n// import {useState} from 'react'\n// function Component(){\n//     const [state, setState] = useState(initState)\n// - Component được re-render sau khi `setState` => dòng log \"code \" được in ra 2 lần \n// - Initial state chỉ dùng cho lần đầu \n// - Set state với callback?\n// - Initial state với callback?\n// - Set state là thay thế state bằng giá trị mới \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","orders","App","total","reduce","cur","console","log","counter","setCounter","handleIncrease","prev","padding"],"sources":["/home/dung/AI_CAM/source_git/cmake_system_service_1/Web/ReactJS/4.Hooks/30.useState/tiktok/src/App.js"],"sourcesContent":["import {useState} from 'react'\n// ===========================// - Set state với callback? ========================\n// function App() {\n//   const [counter, setCounter] = useState(1)\n//   const handleIncrease = () => {\n//     // ra cùng result do counter vẫn là 1 giá trị\n//     // setCounter(counter + 1)\n//     // setCounter(counter + 1)\n//     // setCounter(counter + 1)\n//     // ra két quả khác nhau\n//     setCounter(prev => prev + 1)\n//     setCounter(prev => prev + 1)\n//     // Lúc đầu thì counter  = 1. \n//     // Nếu truyền cho setCounter một callback với 1 đối số thì đối số đó sẽ là giá trị của counter trong lần đầu lúc đó counter = 1. \n//     // Khi sử dụng nhiều hàm setCounter cùng một lúc thì nó sẽ nhận giá trị đối số trước đó của hàm setCounter làm giá trị cho tham số của hàm setCounter\n\n//     // -------------------------\n//     // useState(initial state)\n//     // initial state nhận bất kì giá trị hợp lệ nào trong JS\n//     // Lưu ý trường hợp truyền hàm vào thì nó sẽ nhận cái giá trị mà hàm đó trả về làm initState\n//   }\n//   console.log(\"code \")\n//   return (\n//     <div className=\"App\" style = {{padding: '20px'}}>\n//         <h1>{counter}</h1>\n//         <button onClick = {handleIncrease}>Increase</button>\n//     </div>\n//   )\n// }\n\n\n// =====================================   - Initial state với callback? ==================\nconst orders = [100, 200, 300]\n\nfunction App() {\n  const total = orders.reduce((total, cur)=> total + cur)\n  console.log(total)\n  const [counter, setCounter] = useState(total)\n  const handleIncrease = () => {\n    setCounter(prev => prev + 1)\n    // console.log(\"counter \",counter)\n    // -------------------------\n    // useState(initial state)\n    // initial state nhận bất kì giá trị hợp lệ nào trong JS\n    // Lưu ý trường hợp truyền hàm vào thì nó sẽ nhận cái giá trị mà hàm đó trả về làm initState\n    // Mỗi lần click vào button thì lại render lại App component\n  }\n  console.log(\"code \")\n  console.log(\"counter \",counter) // ra khỏi hàm handleIncrease thì sẽ cho giá trị setCounter = counter\n  return (\n    <div className=\"App\" style = {{padding: '20px'}}>\n        <h1>{counter}</h1>\n        <button onClick = {handleIncrease}>Increase</button>\n    </div>\n  )\n}\n\nexport default App;\n\n\n\n// ### Lưu ý\n\n// import {useState} from 'react'\n\n// function Component(){\n//     const [state, setState] = useState(initState)\n\n\n// - Component được re-render sau khi `setState` => dòng log \"code \" được in ra 2 lần \n// - Initial state chỉ dùng cho lần đầu \n// - Set state với callback?\n// - Initial state với callback?\n// - Set state là thay thế state bằng giá trị mới "],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,MAAMC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAf;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,CAAc,CAACD,KAAD,EAAQE,GAAR,KAAeF,KAAK,GAAGE,GAArC,CAAd;EACAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ;EACA,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAACG,KAAD,CAAtC;;EACA,MAAMO,cAAc,GAAG,MAAM;IAC3BD,UAAU,CAACE,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAV,CAD2B,CAE3B;IACA;IACA;IACA;IACA;IACA;EACD,CARD;;EASAL,OAAO,CAACC,GAAR,CAAY,OAAZ;EACAD,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBC,OAAvB,EAda,CAcmB;;EAChC,oBACE;IAAK,SAAS,EAAC,KAAf;IAAqB,KAAK,EAAI;MAACI,OAAO,EAAE;IAAV,CAA9B;IAAA,wBACI;MAAA,UAAKJ;IAAL;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAQ,OAAO,EAAIE,cAAnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GArBQR,G;;KAAAA,G;AAuBT,eAAeA,GAAf,C,CAIA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}