<button onclick="console.log(this)">Click me!</button>
    <!-- khi vết kiểu attribute thì nó sẽ gom các mã code lại và đóng vào 1 hàm tương tự như viết trong file js -->

arrow function không có context => không có this
        // Vì không có this nên nó sẽ lấy this ở phạm vi bên ngoài của nó(hàm gần nhất chứa nó) => lấy context của hàm ngoài, trả về thís ở bên ngoài => lấy this chính là đối tượng porsche




context và scope
// Điều đầu tiên là phải phân biệt: context và scope là 2 khái niệm khác nhau.
//  Tôi thấy rất nhiều developer nhầm lẫn 2 thuật ngữ này trong một thời gian dài (bao gồm cả tôi).

// Mỗi khi function được gọi thì có cả scope và context kết hợp với nó. 
// Về cơ bản, scope là dựa trên function, còn context dựa trên object. 
// Nói cách khác, scope liên quan đến việc function truy xuất biến khi nó được gọi. 
// Còn context luôn chỉ đến giá trị của từ khóa this tham chiếu đến object sở hữu đoạn code đang được thực thi.

--------------------------------

Trong các phương thức, trong các hàm của JS sẽ tồn tại khái niệm context chỉ duy nhất arrow function là không có 
context thôi. Tùy vào cách gọi hàm hay gọi phương thức thì từ khóa this ở trong hàm,trong phương thức sẽ có thể 
tham chiếu về đối tượng khác nhau (window hoặc đối tượng gọi đến phương thức)

Khi gọi một phương thức thông qua một đối tượng thì từ khóa this tham chiếu về đối tượng mà chúng ta gọi phương thức đó
(đối tượng trước dấu . )
Khi gọi một function độc lập không thông qua một đối tượng thì :
- Ở ngoài strict mode thì từ khóa this sẽ trỏ về đối tượng window (global)
- Ở trong strict mode thì từ khóa this sẽ trả về là undefined 
