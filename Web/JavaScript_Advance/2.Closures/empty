# Scope - Phạm vi

- Các loại phạm vi: 
    - Global - Toàn cầu
    - Code block - Khối mã: let, const. trong một khối code được khai báo bằng let, const thì nó chỉ là biến cục bộ. Phạm vi chỉ trong 1 khối. 
    Không giống như var, biến var có thể truy cập từ ngoài khối code block nhảy ra ngay khối gần nhất ở bên ngoài . Khi sử dụng if else, for, while, v.v => khối code
    {//code trong khối này}
    Let không cho khai báo 2 biến cùng tên, var thì khai báo đc 2 biến cùng tên
    - Local scope - Hàm: var, function (được tạo ra trong phần thân của 1 hàm, khi hàm đó được gọi)
- Khi gọi mỗi hàm luôn có 1 phạm vi mới được tạo 
- Các hàm có thể truy cập các biến được khai báo trong phạm vi của nó và bên ngoài nó
- Cách thức một biến được truy cập
- Khi nào một biến bị xóa khỏi bộ nhớ?
    - Biến toàn cầu?
    - Biến trong code block & trong hàm 
    - Biến trong hàm được tham chiếu bởi 1 hàm?

* Khi đặt trùng tên trong cùng 1 phạm vị thì lỗi
* khi đặt trùng tên ở các phạm vi khác nhau thì ko lỗi
const a= 18 // Biến global. Tương tự với let

{   
    const a= 16
    {
        const a= 14

        {
            const a= 12
            
            {
                const a= 10
                console.log(a) //10
            }
        }
    }
}
Khi truy cập một biến, tìm trong phạm vi có biến nào như vậy không, không có thì ra ngoài 1 phạm vi cho đến khi ra phạm vi global, nếu ko có báo lỗi chưa được define


VD 2 

const a= 18 // Biến global

{   
    {
        {
            {
                console.log(a) //lỗi biến a canot access before initialization
                const a= 10
            }
        }
    }
}

Đã tìm thấy biến a trong phạm vi, nhưng biến a chưa được cấp giá trị khởi tạo nên bị lỗi 